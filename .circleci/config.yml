version: 2.1

executors:
  rails:
    docker:
      - image: circleci/ruby:2.5.1-node-browsers
        environment:
          RAILS_ENV: test
      - image: circleci/mysql:5.6
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: sst_test
          TZ: /usr/share/zoneinfo/Asia/Tokyo
    working_directory: ~/repo

commands:
  bundle_install:
    steps:
      - restore_cache:
          name: bundle installの結果をrestore
          keys: 
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
      - run:
          name: bundle install
          command: bundle install --path vendor/bundle
      - save_cache:
          name: bundle installの結果をキャッシュ
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
  db_setup: 
    steps:
      - run:
          name: データベースの起動を待機
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 1m
      - run:
          name: データベースのセットアップ
          command: bundle exec rake db:schema:load
jobs:
  test:
    executor: rails
    parallelism: 2
    environment:
      FOO: bar
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - bundle_install
      - run:
          name: rubocopを実行(Lint)
          command: bundle exec rubocop
      - run:
          name: brakemanを実行(セキュリティチェック)
          command: bundle exec brakeman -A -w 1 -z
      - db_setup
      - run:
          name: テストの実行
# 2回目は失敗したらランダム落ちとしては扱わないでその後のPRにコメントしない
          command: |
            echo $FOO

            SEED=$RANDOM
            TEST_FILE_NAMES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            TEST_FILE_NAMES=$TEST_FILE_NAMES' spec/models/ci_cutomize_spec.rb'
            bundle exec rspec --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --tag @ci_success:false \
                              --failure-exit-code=0 \
                              --no-fail-fast \
                              --seed $SEED \
                              -- $TEST_FILE_NAMES

            if grep "failure message" test_results/rspec.xml ; then
              bundle exec rspec --tag @ci_success:true --only-failures --failure-exit-code=1
              RSPEC_FAIL_COMMAND="bundle exec rspec --seed $SEED $TEST_FILE_NAMES"
              echo $RSPEC_FAIL_COMMAND > ./test_results/rspec_fail_command.txt
              echo success > ./test_results/retury_test_needed.txt
            fi

      - run:
#          Retryテストの必要性がない場合は処理を実行しない
          command: |
            if [[ ! -e ./test_results/retury_test_needed.txt ]]; then
              echo "no need to retry"
              exit 0
            fi

            curl -sL https://raw.githubusercontent.com/stephencelis/ghi/master/ghi > ghi
            chmod 755 ghi
            sudo mv ghi /usr/local/bin
          name: install ghi
      - run:
#          ヒアドキュメントはYAMLの仕組み上使用できない
#          リトライが必要ない場合は処理を実行しない
          command: |
            if [[ ! -e ./test_results/retury_test_needed.txt ]]; then
              echo "no need to retry"
              exit 0
            fi

            export GHI_TOKEN=$GITHUB_TOKEN
            GH_LOGIN=$(curl -sS https://api.github.com/user\?access_token\=$GITHUB_TOKEN | jq '.login' --raw-output)
            PR_NUMBER=$(basename "${CIRCLE_PULL_REQUEST}")
            RSPEC_FAIL_COMMAND=`cat ./test_results/rspec_fail_command.txt`

            ISSUE_TITLE="random test fail commit hash:$CIRCLE_SHA1\n"
            ISSUE_COMMENT="commit hash:$CIRCLE_SHA1\n"
            ISSUE_COMMENT+="branch:$CIRCLE_BRANCH\n"
            ISSUE_COMMENT+="test command:$RSPEC_FAIL_COMMAND\n"
            ghi open -m "`echo -e $ISSUE_TITLE$ISSUE_COMMENT`" -L 'random test fail'

            ISSU_NUMBER=`ghi list | grep "random test fail commit hash:$CIRCLE_SHA1" | head -1 | awk '{print $1}'`
            PR_COMMENT="random test failed\n"
            PR_COMMENT+="created issue $CIRCLE_REPOSITORY_URL/issues/$ISSU_NUMBER"
            ghi comment -m "`echo -e $PR_COMMENT`" $PR_NUMBER
          name: create random test fail issues

      - store_test_results:
          path: test_results
          name: All Tests
      - store_test_results:
          path: test_retury_results
          name: Retry Tests
      - store_artifacts:
          path: coverage

  use_external_network_test: #外部APIを使用したテスト
    executor: rails
    steps:
      - checkout
      - bundle_install
      - db_setup
      - run:
          name: テストの実行
          command: bundle exec rspec -fd --tag @use_external_network:true

workflows:
  version: 2
  default_workflow:
    jobs:
      - test


